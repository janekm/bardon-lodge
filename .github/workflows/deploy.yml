name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '22.17.1'

jobs:
  deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.deployment-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Apply D1 migrations (Production)
        if: github.ref == 'refs/heads/main'
        run: npx wrangler d1 migrations apply bardon-lodge-directors-prod --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Apply D1 migrations (Staging)
        if: github.ref != 'refs/heads/main'
        run: npx wrangler d1 migrations apply bardon-lodge-directors-staging --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers (Production)
        id: deploy
        if: github.ref == 'refs/heads/main'
        run: |
          npx wrangler deploy --env production
          echo "deployment-url=https://directors.bardonlodge.co.uk" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers (Staging)
        id: deploy-staging
        if: github.ref != 'refs/heads/main'
        run: |
          npx wrangler deploy --env staging
          echo "deployment-url=https://staging-directors.bardonlodge.co.uk" >> $GITHUB_OUTPUT
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy-staging.outputs.deployment-url }}';
            const comment = `ðŸš€ **Staging Deployment Ready**

            Your changes have been deployed to staging:
            **URL:** ${deploymentUrl}

            Please test your changes before merging to production.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Notify deployment success
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            console.log(`âœ… Production deployment successful: ${deploymentUrl}`);

  cleanup:
    name: Cleanup old deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Cleanup staging deployment
        run: |
          echo "ðŸ§¹ Cleaning up staging deployment for closed PR"
          # Add cleanup logic here if needed for staging deployments
